/*
 * META-INF/services/com.tonpackage.HudOverlay
 * -------------------------------------------
 * Liste des implémentations de HudOverlay à charger via ServiceLoader
 */
com.tonpackage.HelmetOverlay
com.tonpackage.PotionOverlay
com.tonpackage.RadiationOverlay

// --------------------------------------------------------
package com.tonpackage;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.ServiceLoader;

/**
 * Chargement dynamique de tous les HudOverlay via Java SPI (ServiceLoader)
 */
public class HudOverlayRegistry {
    private static final List<HudOverlay> ALL = new ArrayList<>();

    static {
        ServiceLoader.load(HudOverlay.class)
                     .forEach(ALL::add);
    }

    /**
     * Retourne la liste non modifiable de tous les overlays chargés.
     */
    public static List<HudOverlay> getAll() {
        return Collections.unmodifiableList(ALL);
    }
}

// --------------------------------------------------------
package com.tonpackage;

import net.minecraftforge.client.event.RenderGuiOverlayEvent;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraftforge.client.gui.overlay.VanillaGuiOverlay;

import java.util.Comparator;

@Mod.EventBusSubscriber(value = Dist.CLIENT)
public class CNClientEvent {

    @SubscribeEvent
    public static void onRenderGuiOverlay(RenderGuiOverlayEvent.Post event) {
        // On ne rend qu'après l'overlay "helmet"
        if (!event.getOverlay().id().equals(VanillaGuiOverlay.HELMET.id())) return;

        GuiGraphics gfx = event.getGuiGraphics();
        float pt = event.getPartialTick();

        HudOverlayRegistry.getAll().stream()
            .filter(HudOverlay::isActive)
            .filter(o -> o.getAfterOverlay().equals(VanillaGuiOverlay.HELMET.id()))
            .sorted(Comparator.comparingInt(HudOverlay::getPriority).reversed())
            .forEach(o -> o.render(gfx, pt));
    }
}
